[
    { "content": ["<img src='./assets/0_0.png' width='100%'><br><br>Angular 는 Misko Hevery 라는 구글 개발자의 개인 프로젝트로 시작 하여 2011년도에 출시 되었습니다. Misko Hevery는 JavaScript를 잘 모르더라도, 프레임 워크를 배우면 쉽게 개발하기 위해서 Angular를 개발 하였으며, 2012 중반부터 뚜렷한 성장세를 보이기 시작 했습니다. <br><br><br>Angular 특징은 SPA(Single Page Web Applications) 형태의 웹 어플리케이션 제작에 적합하며, DOM 제어에 중점을 두지 않고 데이터 변화와 출력에 중점을 주었기에 유지 보수가 쉬우면서 데이터 바인딩을 통해서 뷰와 기능이 분리가 명확해서 개발자와 디자이너의 협업이 쉽다는 장점을 가지고 있습니다.<Br><br><br> Angular는 12년도 이후 꾸준한 성장세를 보이고 있는데 웹 어플리케이션 개발자로부터 <br>1, 코드의 일관성,<br> 2, 구조적(mvc패턴) <br> 3, 이벤트 바인딩, 뷰 업데이트 코드 등으로 코드 량 감소 <Br> 4, 뛰어난 코드 재사용 <Br> 5, 양방향 데이터 바인딩<br> 6, 다양한 Module를 활용한 빠른 개발 <br><Br><Br> 을 인정 받으며, 해외에는 ‘앵귤러JS잡닷컴’이라는 구직 웹사이트가 있을 정도로 앵귤러JS의 인기는 높습니다.",

 "<img src='./assets/angular2logo.png' width='100%' height='35%'><br><br>Ng-europe과 Ng-conf 2015를 통해 Angular 2.0에 대한 발표가 있었고 기존 버전을 사용하던 개발자들은 혼란을 겪을 수밖에 없었습니다. 1.x버전에서 사용되던 많은 것(scope, controller, DDO, angular.module 등)이 2.0버전부터는 사라질 것이고 완전히 달라진 문법과 더불어 마이그레이션 자체를 할 수 없다는 것입니다. 그리고 ATScript, Typescript, ES6등 새로운 기술들이 포함 되었습니다. 기존의 1.3버전에 대한 지원은 2.0버전 발표 이후 1.5~2년 동안만 이루어진다고 하니, 더는 1.x대 버전을 가지고 새로운 일을 진행한다는 것을 고려하게 되었습니다.<br><br><br>2015년 4월 30일 Angular 2.0의 Alpha Developer Preview가 AngularJS 공식 트위터 계정(@angularjs)을 통해 공개되었으며 앞으로 공식 발표될 Angular 2.0에 대해서 미리 접할 수 있게 되었습니다. 기존의 AngularJS 홈페이지 (http://www.angularjs.org)가 아닌 신규 페이지(http://angular.io)를 통해 공개되었으며 이는 1.x에서 대폭 변화된 2.x는 새롭게 운영될 것임을 알 수 있습니다."
  ]},
     { "content": [" 16년 9월에 정식으로 출시 된 Angular 2.0은 웹 개발에 있어 HTML이나 Javascript 뿐만 아니라 다른 언어(Dart or TypeScript)를 사용하여  클라이언트 어플리케이션을 제작을 쉽게 도와주는 프레임워크입니다. <br><br> Angular 2.0으로 Application을 생성하는 과정은 4단계의 과정을 걸치게 됩니다.<br><Br>1 단계 : Angular로 작성된 HTML Template 구성<br><br> 2 단계 : Template을 관리해줄 Component 작성<br><br> 3 단계 : Service에 어플리케이션 로직 추가 <br><br>4 단계 : Bootstrapper에 컴포넌트 전달",
              "<img src='./assets/1_1.png' width='100%'><br><br>- Controller, $scope, jqlite 등의 주요 요소 삭제 --> Component 로 대체 <br><br> 2.0에서 충격적으로 다가올 만한 내용은, Controller, $scope, j0qlite와 같이 주요 요소는 삭제되고, 앳 스크립트(AtScript)가 추가된다는 것입니다. 2.0으로 변화는 1.x 버전의 angular를 이용하던 개발자들에게는 슬픈 소식 입니다. 이러한 소식에 대해, 이미 유튜브와 페이스북과 같은 SNS에서는 많은 개발자들이, ‘hate’, ‘kill’, ‘disaster’와 같은 단어를 쓰면서 비난이 하기도 하였지만 Component를 도입함으로서 코드를 줄이고 추상화를 높일 수 있게 되었다. <br><br> -  Web 컴포넌트로서의 Angular 2.0 <br><br>AngularJS 2.0은 웹을 컴포넌트화를 시도하고 있습니다. controller 기능은 사라지고, 대신 기능을 컴포넌트화 하여 레고블록과 같이 조립하는 구조를 가지고 있습니다.. <br><br> 컴포넌트의 모든 속성과 메소드를 템플릿에서 사용할 수 있습니다. D.I 로 대명사였던 angular.module도 삭제되고 대신 서비스의 개념을 이용 합니다. 또한 jquery를 component로 보고, 컴포넌트로 추가를 하면 Jquery 기능을 모두 사용할 수 있습니다. angular는 jquery와 같은 JS에 종속된 프레임워크로 가져가지 않고 측면에서 기존 directive와 같은 선언형식의 컴포넌트 형식으로 집중하겠다는 의미로 풀이됩니다.",
             "<img src='./assets/typescript.jpg' width='100%'><br><br>타입스크립트(Typescript)는 Angular 2.0에 채택된 언어입니다. <br><br> 타입스크립트(Typescript)는 MS에서 개발한 자바스크립트 상위 집합 언어로서 Angular 2.0의 주 언어로 채택 될 정도로 기능이 강력하고 ECMA 스크립트 표준을 따르는 차세대 자바스크립트입니다. <br><br> Typescript의 특징으로는 큰 규모의 자바스크립트 프로젝트에 적용 가능 합니다. 객체 지향 프로그래밍 지원으로 ES5(브라우저 지원 자바스크립트)에 비해 코드 복잡도가 낮습니다. <Br><br> 또한 명시적인 타입을 제공하여 통해 컴파일 단계에서 발생 될 수 있는 자바스크립트의 결점을 보완했습니다. ex) Boolean형 fales와 숫자 0을 구분할 수 있게 되었습니다.  <br><br> 인텔리센스를 지원하며 자바, C# 등의 객체지향 언어와 비슷한 문법 스타일을 갖추고 있어 학습비용이 낮습니다.",

             "Angular 2.0의 장점 <Br><Br>           ￮ 깔끔한 MVC 구성으로 튜토리얼 정도만 참조해도 MVC 구조를 파악할 수 있을 정도로 직관적입니다. <Br><br> ￮ Component는 가독성이 높고 API특징이 명확하여 이해하기 쉽다. 게다가 Angular 2로  전환이 자유롭다. <br><br>   ￮ HTML5 웹 컴포넌트의 확장성의 용이함을 갖추고 있습니다. <br><br>     ￮ Typescript 채택으로 IDE를 사용하는 프로그래머는 환상적인 자동 완성 기능과 type 제 안을 제공 받을 수 있다. <br><br><br> Angular 2.0의 단점 <Br><br>￮ Typescript의 채용은 많은 이점을 주지만 이전의 javascript 보다 높은 진입장벽과  systemjs와 webpack 등의 프레임워크 사용을 강제 합니다.  <br><br> ￮  국내에 부족한 정보, 대부분의 사이트에서 튜토리얼 단계의 정보만 제공되며 그 이상의 정보는 부족합니다."
    ]},
      { "content": ["<img src='./assets/module.png' width='100%'>Angular에서 Module은 Application을 조작하거나 외부 라이브러리를 통해 기능을 확장하는 기능을 갖고 있습니다. 모든 Angular app은 최소한 하나의 모듈을 가지고 있습니다. 이는 Angular app이 root module 하나는 필수적으로 포함해야하기 때문입니다. 이 root modul의 관념적인 이름이  AppModule 입니다.<br><br> root module은 작은 application의 유일한 하나의 모듈일 수도 있지만, 대부분의 application에서는 더 많은 수의 feature module을 가지고 있습니다. feature module 들은 각각 application 도메인, work flow 등등의 다양한 용도로 쓰입니다.<br><br> Angular에서의 Module은 root module이거나 feature Module인데, @NgModule이라는 Decorator가 있는 클래스입니다. FormsModule, HttpModule, RouterModule ... 등 많은 Angular library는 모듈로 제작 되었으며, 많은 Third-party 라이브러리도 Angular Module로 활용할 수 있다. <bR><br> Application이 로드될 때 Module을 로드할 수 있으며, NgModule은 속성 모듈을 설명하는 하나의 메타데이터 객체를 취한다. 이와 관련하여 가장 중요한 properties는 다음과 같습니다. <Br><br> exports - declaration의 부분집합. <Br>이것은 다른 모듈의 component template안에서 표시되고, 사용됩니다. <br> export할 때 여러 자료형을 가진다. Classes, function, values <br><br> imports - 모듈 내의 component template에서 필요에 의해 선언 된 class가 exported 된  다른 모듈과 의존관계 모듈. <Br><BR>- import 시 핵심 모듈은 @를 붙인다. @angular/core, @angular/common <br><BR>providers <br> - service의 creator.<Br>이 모듈은 service 중에서도 global collection 에 기여한다.<bR> 이것은 app의 모든 부분에 접근한다.<Br><br>bootstraping <Br><BR> (Application Level에서) 최초 수행, 가동할 Component입니다. root component라고 불리는 main application view 이다. 다른 모든 app views를 host 하며 오직 root module만 이 bootstrap property로 설정 됩니다.",
          
      
       "<img src='./assets/component2.png' width='100%'><br><br><img src='./assets/component.png' width='100%'><br><br>Angular.js 2.0 의 Application을 이루고 있는 것은 컴포넌트(Component)입니다. <Br><BR>Component는 'view'라고 불리는 화면 중 일부분을 컨트롤하는 역할을 하고 있습니다. <Br>컴포넌트들이 기능과 목적에 맞게 하나씩 작성되고, 결할 될 수 있으며, 컴포넌트 단위로 Customising을 하거나 별도의 기능을 넣고 테스트 할 수 있습니다. <Br>컴포넌트는 Template + Class(Properites + Method) + Metadata로 구성되고 있습니다. <Br><br> - 컴포넌트를 이용하는 이유 - <br><br>1. 코드량을 줄이는 목적 <br>2. 코드의 기능을 표현하기 위한 목적<Br>3. 내부적인 자세함을 추상화(Encapsulate) 하려는 목적<Br>4. 엘리먼트를 재사용함으로서 생산성을 높이기 위한 측면",     
       
       
       
       "<img src='./assets/template.png' width='100%'><br><br>개발자는 template를 활용하여  Component의 view를 정의할 수 있습니다.<br><br>template은 우리가 알고 있는 HTML의 형태와 같고, Angular에게 어떻게 component를 렌더링 할지에 대해 알려주는 역할을 수행 합니다.",


       "<img src='./assets/class.png' width='100%'><br><br>",

       "<img src='./assets/metadata.png' width='100%'><br><br>Metadata는 컴포넌트를 구성하는 정보를 JSON 객체로 정의한 것이며, Angular에게 클래스를 처리하는 방법에 대해 말해준다.<br><br>클래스에 metadata를 붙임으로 컴포넌트가 된다. TypeScript에서는 decorator(코드 내에서 필요에 따라 부가적인 정보나 속성을 표현하기 위한 언어적 장치)를 사용하여 Metadata를 붙입니다. <br> ",

       "<img src='./assets/directives.png' width='100%'><br><br>Directives는 directive metadata의 클래스입니다.<Br><br> Angular 2.0 template은 동적인 형태입니다. Angular가 랜더링 할 때, 주어진 directives 지시에 따라 DOM을 변환 합니다. Angular 2.0에 채택된 TypeScript에서는 metedata를 클래스에 붙이기 위하여 @Directive 데코레이터를 사용한다.  컴포넌트의 부분과 템플릿의 일부를 조정하기 위한 방법으로 데이터 바인딩을 지원한다. 개발자는 어떻게 양쪽을 연결하는지 Angular에게 알리기 위하여 HTML 템플릿에 바인딩 마크업을 추가 합니다.",
       
       "<img src='./assets/service.png' width='100%'><br><br>서비스는 컴포넌트 내에서 재사용이 빈번한 기능을 서비스로 정의 합니다. <Br><Br>서비스는 응용 프로그램이 요구하는 값, 함수, 기능을 포괄하는 광범위한 범주이다. 거의 모든 것이 서비스가 될 수 있습니다. 개발자는 컴포넌트 클래스가 가볍기를 원하기에 컴포넌트를 서버로부터 데이터를 가져오거나, 사용자 입력을 검증하거나, 콘솔에 출력하지 않습니다. 대신 이러한 일들은 서비스에게 위임한다. 서비스에 로직을 반영하고 컴포넌트에 해당 서비스를 사용할 수 있도록 하는 것이 의존성 주입(Dependency Injection) 입니다.",

       "<img src='./assets/di.png' width='100%' height='30%'><br><br>의존성 주입(Dependency Injection, D.I)는 코드를 조직화하고 단위별로 테스트 가능하게 합니다. 완전히 형성된 종속 클래스의 새로운 인스턴스를 공급하는 방법 입니다. 종속성의 대부분이 서비스이다. Angular는 필요한 서비스와 컴포넌트를 제공하기 위하여 D.I를 사용 합니다. 생성자 매개 변수의 유형을 보고 필요한 컴포넌트를 서비스에게 알려 줍니다. <Br><Br> Angular가 컴포넌트를 만들 때, 먼저 Injector에게 컴포넌트가 필요하다고 서비스에 대한 요청을 한다. Injector는 이전에 생성한 서비스 인스턴스의 컨테이너를 유지 합니다. 요청 된 서비스 인스턴스가 컨테이너에 없으면 Injector를 만들고 Angular에게 서비스를 반환하기 전에 컨테이너에 추가한다. 요청 된 모든 서비스가 사용되고 반환 된 경우, Angular는 인수로부터 서비스와 컴포넌트의 생성자를 호출 할 수 있다. Injector가 없는 경우 사전에 서비스의 Providers에 등록해야한다. provider는 서비스를 생성하거나 반환 할 수 있다.<br><br>어플리케이션의 모든 곳에서 동일한 서비스의 인스턴스를 사용 할 수 있도록 루트 수준에서 부트스트랩을 추가할 수 있으며 또, 컴포넌트 수준에서 속성으로 Provider를 등록할 수 있습니다." 
       ]},
     { "content": ["555555", "555555","6666"]},
        { "content": ["1.angular 정의", "2.angular 특징","3.angular 전망"]}
]